// Generated by CoffeeScript 1.6.3
describe('Raffler class', function() {
    it("should define an object", function() {
    return expect(Raffler).toBeDefined();
  });
    describe('Raffler model', function() {
      var model;
      model = new Raffler.Models.Entry;
         it('can add name', function() {
        model.set({
          name: "Larry"
        });
        return expect(model.get("name")).toEqual("Larry");
      });
      it('default value for winner is false', function() {
        return expect(model.get("winner")).toEqual(false);
      });
      return it('can change winner to true', function() {
        model.set({
          winner: true
        });
        return expect(model.get("winner")).toEqual(true);
      });
    
    });

    describe('Raffler collection', function() {
      var collection;
      collection = new Raffler.Collections.Entries;
    
      it('starts with zero entries', function() {
        return expect(collection.length).toEqual(0);
      });
     return it('can add entries', function() {
        var currLength;
        currLength = collection.length;
        collection.create({
          name: "Larry"
        });
        return expect(collection.length).toEqual(currLength + 1);
      });
      });

     describe('Raffler router', function() {
  
    var Router;
    Router = new Raffler.Routers.Entries;
      it('should define a collection of entries', function() {
        return expect(Router.collection).toBeDefined();
      });
      return it('should define default route as index', function() {
        return expect(Router.routes['']).toBe('index');
      });
     
    });
    
    return describe('Raffler view', function() {
      var entries, view;
      view = null;
      entries = null;
      beforeEach(function() {
        entries = new Raffler.Routers.Entries;
        return view = new Raffler.Views.EntriesIndex({
          collection: entries.collection
        });
      });
    
      it('can reset winners', function() {
        var winner;
        view.resetWinners();
        winner = view.collection.find(function(model) {
          return model.get("winner") === true;
        });
        return expect(winner).toBeUndefined();
      });
      return it('can choose winners', function() {
        var winner;
        view.drawWinner();
        winner = view.collection.find(function(model) {
          return model.get("winner") === true;
        });
        return expect(winner).toBeDefined();
      });
    });
  });


